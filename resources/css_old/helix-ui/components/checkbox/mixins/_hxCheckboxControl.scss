// =================================================== //
// ===== Mixins for <hx-checkbox-control> states ===== //
// =================================================== //

// ========== PRISTINE ==========
@mixin __checkboxControl($pseudo-state: null) {
  @if $pseudo-state == focus {
    box-shadow: $focus-glow;

    &::-ms-check {
      border-color: $rax-component-checkbox-focus-border-color;
      border-color: var(--hxCheckbox-focus-bordercolor, $rax-component-checkbox-focus-border-color);
    }
  }
  @else if $pseudo-state == hover {
    color: $rax-color-primary-700;
    color: var(--hxCheckbox-hover-color, $rax-color-primary-700);

    &::-ms-check {
      background-color: $rax-component-checkbox-hover-background-color;
      background-color: var(--hxCheckbox-pristine-hover-ie-bgcolor, $rax-component-checkbox-hover-background-color);
      border-color: $rax-component-checkbox-hover-border-color;
      border-color: var(--hxCheckbox-pristine-hover-ie-border-color, $rax-component-checkbox-hover-border-color);
      color: $rax-component-checkbox-hover-border-color; //in token border color is used
      color: var(--hxCheckbox-pristine-checkbox-hover-ie-color, $rax-component-checkbox-hover-border-color);
    }
  }
  @else {
    color: $rax-component-checkbox-default-border-color; //in token border color is used
    color: var(--hxCheckbox-color, $rax-component-checkbox-default-border-color);

    &::-ms-check {
      background-color: $rax-component-checkbox-default-background-color;
      background-color: var(--hxCheckbox-bgcolor, $rax-component-checkbox-default-background-color);
      border-color: currentColor;
      border-style: solid; //there is no token for solid
      border-width: $rax-component-checkbox-base-border-width;
      color: inherit;
    }
  }
}

// ========== INVALID ==========
@mixin __checkboxControl--invalid($pseudo-state: null) {
  @if $pseudo-state == focus {
    box-shadow: $focus-glow-invalid;

    &::-ms-check {
      border-color: $rax-component-checkbox-invalid-border-color;
      border-color: var(--hxCheckbox-invalid-bordercolor, $rax-component-checkbox-invalid-border-color);
    }
  }
  @else if $pseudo-state == hover {
    &::-ms-check {
      // v2.0 specs
    }
  }
  @else {
    color: $rax-component-checkbox-invalid-border-color; //in token border color is used
    color: var(--hxCheckbox-invalid-color, $rax-component-checkbox-invalid-border-color);
    background-color: $rax-color-status-critical-100;
    background-color: var(--hxCheckbox-invalid-bgcolor, $rax-color-status-critical-100);

    &::-ms-check {
      border-width: $rax-component-checkbox-base-border-width;
      border-color: $rax-component-checkbox-invalid-border-color !important;
      border-color: var(--hxCheckbox-invalid-ie-border-color, $rax-component-checkbox-invalid-border-color) !important;
      color: $rax-component-checkbox-invalid-border-color !important;
      color: var(--hxCheckbox-invalid-ie-color, $rax-component-checkbox-invalid-border-color) !important;
    }
  }
}

// ========== DISABLED ==========
@mixin __checkboxControl--disabled($pseudo-state: null) {
  @if $pseudo-state == focus {
    &::-ms-check {
      border-color: $rax-component-checkbox-disabled-border-color;
      border-color: var(--hxCheckbox-disabled-bordercolor, $rax-component-checkbox-disabled-border-color);
      box-shadow: $focus-glow-disabled;
    }
  }
  @else if $pseudo-state == hover {
    &::-ms-check {
      background-color: $rax-color-gray-0; //there is no token for bg color
      background-color: var(--hxCheckbox-disabled-hover-bgcolor, $rax-color-gray-0);
      border-color: $rax-component-checkbox-disabled-border-color;
      border-color: var(--hxCheckbox-disabled-hover-border-color, $rax-component-checkbox-disabled-border-color);
      color: $rax-component-checkbox-disabled-background-color; //in token bg color is used
      color: var(--hxCheckbox-disabled-hover-color, $rax-component-checkbox-disabled-background-color);
    }
  }
  @else {
    cursor: not-allowed;

    &::-ms-check {
      background-color: $rax-color-gray-0 !important; // simplest way of styling
      background-color: var(--hxCheckbox-disabled-ie-bgcolor, $rax-color-gray-0); //there is no token for bg color
      border-color: $rax-component-checkbox-disabled-border-color;
      border-color: var(--hxCheckbox-disabled-ie-border-color, $rax-component-checkbox-disabled-border-color);
      border-width: $rax-component-checkbox-base-border-width;
      color: $rax-component-checkbox-disabled-background-color; //in token bg color is used
      color: var(--hxCheckbox-disabled-ie-color, $rax-component-checkbox-disabled-background-color);
    }
  }
}

@mixin hxCheckboxControl($state: null, $pseudo-state: null) {
  @if $state == invalid {
    @include __checkboxControl--invalid($pseudo-state);
  }
  @else if $state == disabled {
    @include __checkboxControl--disabled($pseudo-state);
  }
  @else {
    @include __checkboxControl($pseudo-state);
  }
}
