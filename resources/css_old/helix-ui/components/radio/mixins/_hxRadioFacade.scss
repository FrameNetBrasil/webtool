// ===== Mixins for <hx-radio> facade states =====

// ========== PRISTINE ==========
@mixin __radioFacade($pseudo-state: null) {
  @if $pseudo-state == focus {
    box-shadow: $focus-glow;
  }
  @else {
    background-color: $rax-component-radio-default-background-color;
    background-color: var(--hxRadio-pristine-radio-facade-bgcolor, $rax-component-radio-default-background-color);
    border: $rax-component-radio-base-border-width solid currentColor;
    color: $rax-color-primary-700;
    color: var(--hxRadio-pristine-radio-facade-color, $rax-color-primary-700); // didnt find proper token
  }
}

// ========== INVALID ==========
@mixin __radioFacade--invalid($pseudo-state: null) {
  @if $pseudo-state == focus {
    box-shadow: $focus-glow-invalid;
  }
  @else if $pseudo-state == hover {
    background-color: $rax-color-status-critical-100;
    background-color: var(--hxRadio-invalid-radio-facade-hover-bgcolor, $rax-color-status-critical-100);
    border: 1px solid currentColor;
    color: $rax-color-status-critical-500;
    color: var(--hxRadio-invalid-radio-facade-hover-color, $rax-color-status-critical-500);
  }
  @else {
    border: $rax-component-radio-base-border-width solid currentColor;
    color: $rax-component-radio-invalid-border-color;
    color: var(--hxRadio-invalid-radio-facade-color, $rax-component-radio-invalid-border-color);
  }
}

// ========== DISABLED ==========
@mixin __radioFacade--disabled($pseudo-state: null) {
  border: $rax-component-radio-base-border-width solid currentColor;
  color: $rax-component-radio-disabled-border-color;
  color: var(--hxRadio-disabled-radio-facade-color, $rax-component-radio-disabled-border-color);
  cursor: not-allowed;

  // v2.0 specs - hover state removed
}

@mixin hxRadioFacade($state: null, $pseudo-state: null) {
  @if $state == invalid {
    @include __radioFacade--invalid($pseudo-state);
  }
  @else if $state == disabled {
    @include __radioFacade--disabled($pseudo-state);
  }
  @else {
    @include __radioFacade($pseudo-state);
  }
}
